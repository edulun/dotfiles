filetype off
set rtp+=~/.vim/bundle/Vundle.vim
set shell=/bin/bash
call vundle#begin()

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'

" Setting colorschemes
Plugin 'flazz/vim-colorschemes'

" Sensible defaults
Plugin 'tpope/vim-sensible'

" Status / tabline
Plugin 'bling/vim-airline'

" Quick commenting code <>cc
Plugin 'scrooloose/nerdcommenter'

" Multiple cursors
Plugin 'terryma/vim-multiple-cursors'

" Linter
Plugin 'w0rp/ale'

" File navigation
" <c-t>, <c-v>, <c-x> to open the selected entry in a new tab or in a new split.
Plugin 'junegunn/fzf'

" Highlight EOL whitespace
Plugin 'bronson/vim-trailing-whitespace'

" Git wrapper
Plugin 'tpope/vim-fugitive'

" Easier navigation with netrw
Plugin 'tpope/vim-vinegar'

" Bracketed pasting, so pasting code doesn't mess up the indentation.
Plugin 'conradirwin/vim-bracketed-paste'

" Surround text
Plugin 'tpope/vim-surround'

" 2-character search motion (s/S).
Plugin 'justinmk/vim-sneak'

" https://github.com/airblade/vim-gitgutter
Plugin 'airblade/vim-gitgutter'

" Highlight enclosing tags
Plugin 'Valloric/MatchTagAlways'

" Always autoclose HTML tags
Plugin 'alvan/vim-closetag'

" Displays indentation levels
Plugin 'Yggdroot/indentline'

""" Language specific plugins
Plugin 'pangloss/vim-javascript'
Plugin 'mxw/vim-jsx'
Plugin 'styled-components/vim-styled-components'
Plugin 'posva/vim-vue'

Plugin 'neoclide/coc.nvim'

call vundle#end()

set splitbelow
set splitright

set lazyredraw
colorscheme gruvbox
set background=dark

" 1 tab == 2 spaces
set expandtab
set shiftwidth=2
set tabstop=2
" Linebreak on 500 characters
set lbr
set tw=500
set si "Smart indent
set wrap "Wrap lines
set colorcolumn=80

set nobackup
set nowritebackup
set noswapfile
set undofile
set undodir=~/.vim/undos

set ignorecase
set smartcase
set hlsearch
set relativenumber

set wildignore+=*/tmp/*,*.so,*.swp,*.class,*.zip,*/dist/*,*/node_modules/*,*/reports/*,*/bower_components/*,*/test/fixtures/*,*/build/*

set nomodeline
set statusline=%f
set statusline+=\ %h%w%m%r
set statusline+=%=
set statusline+=%-16(%{exists('g:loaded_fugitive')?fugitive#statusline():''}\%)
set statusline+=\ %P/%L

inoremap jk <esc>
inoremap kj <esc>

noremap <S-K> kJ

xnoremap <Tab> >gv
xnoremap <S-Tab> <gv

noremap <leader>p "+p
noremap <leader>y "+y

set foldmethod=syntax
set foldlevel=99

let g:indentLine_char = '|'
let g:indentLine_color_term = 242

let g:closetag_filenames = "*.html,*.xhtml,*.phtml,*.erb,*.jsx,*.js,*.vue"
let g:closetag_xhtml_filenames = '*.xhtml,*.jsx,*.erb,*.vue'
let g:closetag_emptyTags_caseSensitive = 1

let g:mta_filetypes = {
    \ 'html' : 1,
    \ 'xhtml' : 1,
    \ 'xml' : 1,
    \ 'javascript.jsx' : 1,
    \ 'js' : 1,
    \ 'jinja' : 1,
    \}

let g:ale_fixers= {}
let g:ale_fixers['javascript'] = ['prettier']
let g:ale_fix_on_save = 1

let mapleader = "\<Space>"

" Relative or absolute number lines
function! NumberToggle()
  if(&number == 1)
    set number!
    set relativenumber!
  elseif(&relativenumber==1)
    set relativenumber
    set number
  else
    set norelativenumber
    set number
  endif
endfunction

nnoremap <Leader>l :call NumberToggle()<CR>

noremap <leader>h :wincmd s<CR>
noremap <leader>G :GitGutterToggle<CR>
noremap <leader>v :wincmd v<CR>
noremap <leader>w :w<CR>
noremap <c-p> :FZF<CR>

" coc configurations
set hidden
set cmdheight=2
set updatetime=300
set shortmess+=c
set signcolumn=yes

" Use tab for trigger completion with characters ahead and navigate.
" Use command ':verbose imap <tab>' to make sure tab is not mapped by other plugin.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
inoremap <silent><expr> <c-space> coc#refresh()

" Use <cr> to confirm completion, `<C-g>u` means break undo chain at current position.
" Coc only does snippet and additional edit on confirm.
inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"

" Remap keys for gotos
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window
nnoremap <silent> K :call <SID>show_documentation()<CR>

" Highlight symbol under cursor on CursorHold
autocmd CursorHold * silent call CocActionAsync('highlight')

" Remap for rename current word
nmap <leader>rn <Plug>(coc-rename)

" Remap for format selected region
xmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)

augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Remap for do codeAction of selected region, ex: `<leader>aap` for current paragraph
xmap <leader>a  <Plug>(coc-codeaction-selected)
nmap <leader>a  <Plug>(coc-codeaction-selected)

" Remap for do codeAction of current line
nmap <leader>ac  <Plug>(coc-codeaction)
" Fix autofix problem of current line
nmap <leader>qf  <Plug>(coc-fix-current)

" Use <tab> for select selections ranges, needs server support, like: coc-tsserver, coc-python
nmap <silent> <TAB> <Plug>(coc-range-select)
xmap <silent> <TAB> <Plug>(coc-range-select)
xmap <silent> <S-TAB> <Plug>(coc-range-select-backword)

" Use `:Format` to format current buffer
command! -nargs=0 Format :call CocAction('format')

" Use `:Fold` to fold current buffer
command! -nargs=? Fold :call     CocAction('fold', <f-args>)

" use `:OR` for organize import of current buffer
command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')

" Add status line support, for integration with other plugin, checkout `:h coc-status`
set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

" Using CocList
" Show all diagnostics
nnoremap <silent> <space>a  :<C-u>CocList diagnostics<cr>
" Manage extensions
nnoremap <silent> <space>e  :<C-u>CocList extensions<cr>
" Show commands
nnoremap <silent> <space>c  :<C-u>CocList commands<cr>
" Find symbol of current document
nnoremap <silent> <space>o  :<C-u>CocList outline<cr>
" Search workspace symbols
nnoremap <silent> <space>s  :<C-u>CocList -I symbols<cr>
" Do default action for next item.
nnoremap <silent> <space>j  :<C-u>CocNext<CR>
" Do default action for previous item.
nnoremap <silent> <space>k  :<C-u>CocPrev<CR>
" Resume latest coc list
nnoremap <silent> <space>p  :<C-u>CocListResume<CR>
